#!/usr/bin/python3
# -*- coding: utf-8 -*-

"""Override ESPHome CLI tool located in /usr/local/bin/esphome.

Feature 1: Overload the 'external_components' to specify the only source as local 'components' workspace folder
Fetaure 2: Share the compiled software in between configurations by creating shared pio projects
           This is done by overriding the build_path by a hash of the build_flags
Feature 3: use the platformio idedata computed while compiling to feed the '.vscode/c_cpp_properties.json' to use C++ intellisense
"""

import os
import sys
import json
import hashlib

import esphome.__main__ as main_esphome
from typing import Any

from esphome.core import CORE, TimePeriod
from esphome import platformio_api, yaml_util, writer


def get_wsk_folder(folder_name: str):
    work_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    return os.path.join(work_dir, folder_name)


#########################
## Override yaml load
#########################
def load_yaml_override(fname: str, clear_secrets: bool = True) -> Any:
    conf = prev_load_override(fname, clear_secrets)
    comp_folder = get_wsk_folder("components")
    conf["external_components"] = [
        {
            "source": {"path": comp_folder, "type": "local"},
            "refresh": TimePeriod(seconds=1),
            "components": "all",
        }
    ]
    main_esphome._LOGGER.info(
        f"Override Feature 1: 'external_components' setup to local '{comp_folder}'"
    )
    return conf


prev_load_override = yaml_util.load_yaml
yaml_util.load_yaml = load_yaml_override


#############################################
## Override cpp write (build path)
#############################################
def write_cpp_override(conf):
    main_esphome.generate_cpp_contents(conf)
    main_esphome._LOGGER.info("Override Feature 2: Cache builds with same parameters.")
    # maybe add framework params? not sure as already in build_args
    params = [*CORE.build_flags]
    base_conf = hashlib.sha256("".join(sorted(params)).encode("utf-8")).hexdigest()
    CORE.build_path = get_wsk_folder(f".cache/builds/{base_conf}")
    return main_esphome.write_cpp_file()


def update_storage_json_override() -> None:
    pass


main_esphome.write_cpp = write_cpp_override
writer.update_storage_json = update_storage_json_override


#############################################
## Override compile action
#############################################
def compile_program_override(args, conf):
    main_esphome._LOGGER.info("Compiling app...")
    rc = platformio_api.run_compile(conf, CORE.verbose)
    if rc != 0:
        return rc
    idedata = platformio_api.get_idedata(conf)
    if idedata is not None:
        vscode_folder = get_wsk_folder(".vscode")
        os.makedirs(vscode_folder, exist_ok=True)
        with open(
            os.path.join(vscode_folder, "c_cpp_properties.json"), "w"
        ) as output_json:
            json.dump(convert_pio_to_vscode(idedata.raw), output_json, indent=4)
        main_esphome._LOGGER.info(
            f"Override Feature 3: vscode C++ Configuration '{idedata.raw['env_name']}' refreshed."
        )
        return 0
    return 1


main_esphome.compile_program = compile_program_override


def get_std_flag(flags: list[str]):
    std_flag = [flag[5:] for flag in flags if flag.startswith("-std=")]
    return std_flag[0] if std_flag else ""


def convert_pio_to_vscode(input_data):
    all_include = [
        *input_data["includes"]["build"],
        *input_data["includes"]["compatlib"],
        *input_data["includes"]["toolchain"],
    ]
    return {
        "configurations": [
            {
                "name": input_data["env_name"],
                "includePath": all_include,
                "browse": {
                    "limitSymbolsToIncludedHeaders": True,
                    "path": all_include,
                },
                "defines": input_data["defines"],
                # "cStandard": get_std_flag(input_data["cc_flags"]),
                # "cppStandard": get_std_flag(input_data["cxx_flags"]),
                "compilerPath": input_data["cc_path"],
                "compilerArgs": input_data["cc_flags"],
            }
        ],
        "version": 4,
    }


########################
##  MAIN
########################
if __name__ == "__main__":
    sys.exit(main_esphome.main())
